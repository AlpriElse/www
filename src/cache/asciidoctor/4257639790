<div class="sect1">
<h2 id="yvPGyAzjIWxppDwhCkgPugvxiKuRyxUi">!</h2>
<div class="sectionbody">
<div class="openblock janini smallest compiler">
<div class="content">
<div class="message">Polymorphism</div>
<div class="literalblock">
<div class="content">
<pre>public class Pet {
  public void printMe() {
    System.out.println("I'm a pet");
  }
}
public class Dog extends Pet {
  public void printMe() {
    System.out.println("I'm a dog");
  }
}
public class Example {
  public static void main(String[] unused) {
    Pet chuchu = new Dog();
    Pet xyz = new Pet();
    chuchu.printMe();
    xyz.printMe();
  }
}</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="utODlYJfUqsTWlZolzOmbJQfoeybEMtO">Hierarchical Name and Method Resolution</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>The Java type hierarchy is used when resolving the names of variables and
methods:</p>
</div>
<div class="olist arabic s">
<ol class="arabic">
<li>
<p>Does the class have a variable or method with the given name? If so, use it.</p>
</li>
<li>
<p>If not, search the parent class&mdash;but limited by <code>public</code> and <code>protected</code></p>
</li>
<li>
<p>Continue up the tree until the name is found or the search fails</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="EFtrqgaiRBTgcQdTnJRPbWjgrNlnxZhF">! Method Overriding</h2>
<div class="sectionbody">
<div class="literalblock janini smallest compiler">
<div class="content">
<pre>public class Animal {
  public String toString() {
    return "I'm an animal!";
  }
}
public class Pet extends Animal { }
public class Dog extends Pet { }
public class OldDog extends Dog { }
public class SweetOldDog extends OldDog { }
public class Example {
  public static void main(String[] unused) {
    SweetOldDog chuchu = new SweetOldDog();
    System.out.println(chuchu.toString());
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="tJAEhRBaxOdrIAfHFqeluBfFBFVZEkZI">Polymorphism</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)">Polymorphism</a>:
the provision of a single interface to entities of different types.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>We&#8217;ll discuss interfaces in more detail when we talk about about packages.
For now, let&#8217;s identify two kinds of Java polymorphism using examples.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="xejQOFdnYNedKmENRxJOESdlitSRXvBw">Subtype Polymorphism</h2>
<div class="sectionbody">
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Pet {
  public void printMe() {
    System.out.println("I'm a pet");
  }
}
public class Dog extends Pet {
  public void printMe() {
    System.out.println("I'm a dog");
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>In Java, <em>every</em> object is really an instance of at least <em>two</em> types:</p>
</div>
<div class="ulist s">
<ul>
<li>
<p>Each <code>Pet</code> is also an <code>Object</code></p>
</li>
<li>
<p>Each <code>Dog</code> is also a <code>Pet</code> and also an <code>Object</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="zAfgNaUvOdTRoYcImWOGArtsyjxiCuXW">Object Conversion: Upcasting</h2>
<div class="sectionbody">
<div class="listingblock smaller">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Pet { }
public class Dog extends Pet {
  public String toString() {
    return "Dog";
  }
}
public class Example {
  public static void main(String[] unused) {
    Dog chuchu = new Dog();
    Pet xyz = new Pet();
    Example.printAnything(chuchu);
    Example.printAnything(xyz);
  }
  public static void printAnything(Object toPrint) {
    System.out.println(toPrint.toString());
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>Java will <em>upcast</em> object types automatically.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="CibxAzCMpvrFpjbBUcHRBnCoPdroMZDc">! Object Conversion: Upcasting</h2>
<div class="sectionbody">
<div class="literalblock janini smaller compiler">
<div class="content">
<pre>public class Pet { }
public class Dog extends Pet {
  public String toString() {
    return "Dog";
  }
}
public class Example {
  public static void main(String[] unused) {
    Dog chuchu = new Dog();
    Pet xyz = new Pet();
    Example.printAnything(chuchu);
    Example.printAnything(xyz);
  }
  public static void printAnything(Object toPrint) {
    System.out.println(toPrint.toString());
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="YHYXBIyexgSczCgXpNsrgcVZtiCWeifQ">But Instances Retain Their Types</h2>
<div class="sectionbody">
<div class="listingblock smaller">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Pet { }
public class Dog extends Pet {
  public String toString() {
    return "Still a Dog";
  }
}
public class Example {
  public static void main(String[] unused) {
    Dog chuchu = new Dog();
    Object chuchuAsObject = chuchu;
    System.out.println(chuchuAsObject);
    Pet chuchuAsPet = chuchu;
    System.out.println(chuchuAsPet);
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="faLGlVEpJnzuilavUdSpPJnjoRNXqcsn">! But Instances Retain Their Types</h2>
<div class="sectionbody">
<div class="literalblock janini smaller compiler">
<div class="content">
<pre>public class Pet { }
public class Dog extends Pet {
  public String toString() {
    return "Still a Dog";
  }
}
public class Example {
  public static void main(String[] unused) {
    Dog chuchu = new Dog();
    Object chuchuAsObject = chuchu;
    System.out.println(chuchuAsObject);
    Pet chuchuAsPet = chuchu;
    System.out.println(chuchuAsPet);
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="sdlBDsmJxGzipqJCuKbCXcwbxKBRbrno">Object Conversion: Downcasting</h2>
<div class="sectionbody">
<div class="listingblock smallest">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Pet { }
public class Dog extends Pet {
  public String toString() {
    return "Still a Dog";
  }
}
public class Example {
  public static void main(String[] unused) {
    Object chuchu = new Dog();
    Example.printAnything(chuchu);
    Pet chuchuAsPet = (Pet) chuchu; // chuchu is a Pet, so this works
    Example.printAnything(chuchuAsPet);
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>We can also cast instances <em>down</em> but only if the instance is
actually the appropriate subtype.</p>
</div>
<div class="paragraph">
<p>Java checks the cast at runtime to make sure that it is appropriate.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="GJrYLdzWnTewfJWDGEyNqVxQyxjMmJCk">! Object Conversion: Downcasting</h2>
<div class="sectionbody">
<div class="literalblock janini smaller compiler">
<div class="content">
<pre>public class Pet { }
public class Dog extends Pet {
  public String toString() {
    return "Still a Dog";
  }
}
public class Example {
  public static void main(String[] unused) {
    Object chuchu = new Dog();
    System.out.println(chuchu);
    Pet chuchuAsPet = (Pet) chuchu; // chuchu is a Pet, so this works
    System.out.println(chuchuAsPet);
    Dog chuchuAsDog = (Dog) chuchu; // chuchu is also a Dog, so this works
    System.out.println(chuchuAsDog);
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="AtydbVpehoLTEsgqUCgcTyIHlnazMXPZ">Liskov Substitution Principle</h2>
<div class="sectionbody">
<div class="quoteblock spelling_exception">
<blockquote>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Substitutability</a>
is a principle in object-oriented programming stating that, in a computer
program, if S is a subtype of T, then objects of type T may be replaced with
objects of type S (i.e. an object of type T may be substituted with any object
of a subtype S) without altering any of the desirable properties of T
(correctness, task performed, etc.).</p>
</div>
</blockquote>
</div>
</div>
</div>
<div class="sect1">
<h2 id="YdzjjHYfOSgtZMjLkvIhKLkJaqIrXxop">Barbara Liskov, Turing Award Winner</h2>
<div class="sectionbody">
<div class="imageblock" style="float: right">
<div class="content">
<a class="image" href="https://en.wikipedia.org/wiki/Barbara_Liskov"><img src="http://www.pmg.csail.mit.edu/~liskov/images/LISKOV_crop2.jpg" alt="LISKOV crop2" width="240"></a>
</div>
</div>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Barbara_Liskov">Barbara Liskov</a>
was one of the first women in the US to earn a doctorate in computer science.
She won the
<a href="https://en.wikipedia.org/wiki/Barbara_Liskov">Turing Award</a>,
the highest honor in computer science, in 2008.</p>
</div>
<div class="paragraph">
<p>She&#8217;s given a bunch of great talks that you can find on YouTube, like
<a href="https://www.youtube.com/watch?v=dtZ-o96bH9A">this one</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="OATBRaKvmmWGbIHmitVKUksUJMIBWatq">! Turing Award</h2>
<div class="sectionbody">
<div class="embed-responsive embed-responsive-4by3">
  <iframe class="embed-responsive-item" src="https://en.wikipedia.org/wiki/Turing_Award"></iframe>
</div>
</div>
</div>
<div class="sect1">
<h2 id="vYNdytBzGCFQZFlgSJqaNdVbkirdoOBB">! Michael Stonebraker Talk</h2>
<div class="sectionbody">
<div class="embed-responsive embed-responsive-4by3">
  <iframe class="embed-responsive-item" src="https://calendars.illinois.edu/detail/5598?eventId=33299744"></iframe>
</div>
</div>
</div>
<div class="sect1">
<h2 id="nUWyBwYOCDtTXFYmxzjQBKdtSVcLLhjZ">Substitutability in Practice</h2>
<div class="sectionbody">
<div class="listingblock smaller">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Pet { }
public class Dog extends Pet {
  public String toString() {
    return "Dog";
  }
}
public class Example {
  public static void main(String[] unused) {
    Dog chuchu = new Dog();
    Pet xyz = new Pet();
    Example.printAnything(chuchu);
    Example.printAnything(xyz);
  }
  public static void printAnything(Object toPrint) {
    System.out.println(toPrint.toString());
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Since everything is an <code>Object</code>, any Java object inherits all of the desirable
properties of <code>Object</code>: like <code>toString</code>.</p>
</div>
</div>
</div>
<div class="sect1 oneword">
<h2 id="VhyrHDhYiwsScmHUunmuvwgwbiWRJPqJ">Subtype Polymorphism</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>We can always use <code>toString</code>, but every class can implement it
differently.</p>
</div>
</div>
</div>
<div class="sect1 oneword">
<h2 id="yvYtRfULCbIvhMMdEOcGHIreUrBynaXT">Same Names, Different Behavior</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Where else have we seen this before?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="vGwilOBrBAWUfzutpyvFACGGhIYzMNyQ">! Java Method Overloading</h2>
<div class="sectionbody">
<div class="literalblock janini small">
<div class="content">
<pre>static int sum(int first, int second) {
  return first + second;
}
static double sum(double first, double second) {
  return first + second;
}
System.out.println(sum(10, 20));
System.out.println(sum(10.0, 20.0));</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="CaeAiZMIixRpAkCxQeiqMdVeitvqdxFV">Polymorphism</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)">Polymorphism</a>:
the provision of a single interface to entities of different types.</p>
</div>
</blockquote>
</div>
<div class="ulist s">
<ul>
<li>
<p><strong>Subtype polymorphism</strong>: a single method can act on all descendants of a given
class</p>
</li>
<li>
<p><strong>Method overloading</strong>: a method can behave differently depending on its arguments</p>
</li>
<li>
<p>Generic types (discussed in lab next week)</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="HiLlpvxKziOlYYkRfdKZIjluYKLMNtQj">Announcements</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="/MP/3/">MP3</a> is due <em>today</em> by 5PM. Good luck wrapping up! We have office
hours all day downstairs.</p>
</li>
<li>
<p>MP4 will be out today and due in <em>two weeks</em>.</p>
</li>
<li>
<p>My office hours continue today at 11AM in the lounge outside of Siebel 0226.</p>
</li>
<li>
<p>The final exam will be <strong>Friday, May 11th 2018 @ 1:30PM</strong> in Foellinger
Auditorium. It&#8217;s on the
<a href="https://cs125.cs.illinois.edu/info/syllabus/#calendar">course calendar</a>.</p>
</li>
<li>
<p>We will not have class the Friday before Spring Break: <strong>Friday March 16th</strong>.
Enjoy Spring Break!
(It&#8217;s also on the
<a href="https://cs125.cs.illinois.edu/info/syllabus/#calendar">calendar</a>.)</p>
</li>
</ul>
</div>
</div>
</div>