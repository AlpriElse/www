<div class="sect1">
<h2 id="TzChbqJCgkFihBhsGKSsxQCgNgfcontb">!</h2>
<div class="sectionbody">
<div class="openblock janini compiler small">
<div class="content">
<div class="message">Constructors and Visibility</div>
<div class="literalblock">
<div class="content">
<pre>public class Course {
  private String name;
  public Course(String setName) {
    this.name = setName;
  }
  public void printName() {
    System.out.println(this.name);
  }
}
public class Example {
  public static void main(String[] unused) {
    Course CS125 = new Course("CS 125");
    CS125.printName();
  }
}</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1 oneword">
<h2 id="YpWHDHsQBfzJfRdjByfBAIEShCbkuEEe">Happy Valentine&#8217;s Day</h2>
<div class="sectionbody">
<div class="paragraph">
<p>(Don&#8217;t expect your human relationships to be like your computer relationship.)</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="hILNWXNSfbqfDScSdZSMElhrHxPqZyhA">Q3 Review: Functions</h2>
<div class="sectionbody">
<div class="literalblock janini small">
<div class="content">
<pre>// What would be a small improvement to the function shown below?
static boolean a(int[] b) {
  for (int i = 0; i &lt; b.length; i++) {
    for (int j = i; j &lt; b.length; j++) {
      if (b[j] &lt; b[i]) {
        return false;
      }
    }
  }
  return true;
}
System.out.println(a(new int[] { 5, 4, 3 }));
System.out.println(a(new int[] { 1, 2, 3 }));</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="TsQKxaztMSiasPjQKmCcTyCpnXyzrHYN">Q3 Review: Functions</h2>
<div class="sectionbody">
<div class="literalblock janini small">
<div class="content">
<pre>// What is one problem with the function shown below?
static int s(int[][] a) {
  int count = 0;
  for (int i = 0; i &lt; a.length; i++) {
    for (int j = 0; j &lt; a[0].length; j++) {
      count += a[i][j];
    }
  }
  return count;
}
System.out.println(s(new int[][] { { 0, 1 }, { 4, 5 } }));</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="hlfdiGKWEOhWSIhHoigkHyjWUtqNOqaK">Q3 Review: Function Terminology</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>What do we call the combination of the function name and list of argument types
that is used by Java to determine which function to call?</p>
</div>
<div class="paragraph">
<p>(Everyone got credit for this because it wasn&#8217;t <em>written</em> on a slide, although
it is now.)</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cBvAQSUjOeMftzBoERafEeauVrkncSqx">Review: <code>this</code></h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Dimensions {
  int width;
  int height;

  int area() {
    return this.width * this.height;
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>Instance methods can refer to <em>their</em> instance variables using the <code>this</code>
keyword.</p>
</div>
<div class="paragraph">
<p><code>this</code> refers to the instance that is executing the method.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="GQkSDDzyEwCVgBrPzzUIFXVBlGQVXknp">New Examples</h2>
<div class="sectionbody">
<div class="literalblock janini compiler small">
<div class="content">
<pre>// Just a warning that some examples now work differently
// When run the main method of the Example class below is executed
public class Example {
  public static void main(String[] unused) {
    System.out.println("Hello, world!");
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="ajeIIqKVvQLniMORsJidtAJimqtKNpee">Constructors</h2>
<div class="sectionbody">
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Course {
  String name;
  // This is a constructor.
  Course(String setName) {
    this.name = setName;
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>When we create a <code>new</code> object, a special method called a <em>constructor</em> is run.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="buNTLZGlGhEWCuYdcziosJgrosQvbMTz">Constructors: Syntax</h2>
<div class="sectionbody">
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Course {
  String name;
  // The constructor must be named Course
  // It's not declared to return anything...
  Course(String setName) {
    this.name = setName;
    // And doesn't explicitly return anything, but always returns a new Course
  }
}</code></pre>
</div>
</div>
<div class="ulist s small">
<ul>
<li>
<p>Constructors can and do perform class-specific initialization.</p>
</li>
<li>
<p>Constructors always shared the same same name as the class they create:
<code>Course</code> in the example above.</p>
</li>
<li>
<p>Constructors don&#8217;t declare or explicitly return anything&mdash;but always
return a new instance of their class.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="FTdOVkxrUPztoaVrEEgbYkZrQlZTFKrq">Constructors: Overloading</h2>
<div class="sectionbody">
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Course {
  String name;
  // This constructor sets the name
  Course(String setName) {
    this.name = setName;
  }
  // This constructor initializes the name to a blank string
  Course() {
    this.name = "";
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>Like other functions, constructors can be overloaded.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="dNRMfdwEtepowaaciBuymTvAxgvQLMHB">The Default Constructor</h2>
<div class="sectionbody">
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Course {
  String name;
}
// This is the same as
class Course {
  String name;
  Course() {
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>If you don&#8217;t define a constructor, it&#8217;s equivalent of an empty constructor that
doesn&#8217;t set any fields.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="RjGBTtWoaOclLyIPbQKbwFJrRvndpSPP">Constructors Can&#8217;t Fail</h2>
<div class="sectionbody">
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Course {
  String name;
  Course(String setName) {
    // What do I do if the name is invalid?
    this.name = setName;
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead small">
<p>Constructors <em>must</em> return a new instance of their class.</p>
</div>
<div class="ulist s">
<ul>
<li>
<p>So we don&#8217;t have a good way to reject invalid inputs in constructors&mdash;yet.</p>
</li>
<li>
<p>We&#8217;ll come back to this when we talk about static methods&#8230;&#8203;</p>
</li>
<li>
<p>and when we discuss exceptions.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="xerFaeehMgBcfwprdjQAKZoTzUWVPATK">! Constructors: Example</h2>
<div class="sectionbody">
<div class="literalblock janini compiler small">
<div class="content">
<pre>public class Person {
}
public class Example {
  public static void main(String[] unused) {
    Person you = new Person();
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1 oneword">
<h2 id="JlVmEinaPtCRqpZOnlTolvogFyPHVKXB">Questions about Constructors?</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="vXjpdpUWinRcWjZxTCJyJbaYabbcApBO">Access Modifiers</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Person {
  public String name;
  private int age;

  private void printName() {
    System.out.println(this.name);
  }
  public int getAge() {
    return this.age;
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>Java provides ways to <em>protect</em> instance variables and methods.
We refer to these as <em>access modifiers</em>:</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="FuxctosbVUCwtkyRnvjrreGXOytKKWew">Variable Access Modifiers</h2>
<div class="sectionbody">
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Person {
  // Anybody can modify name
  public String name;
  // age can only be changed by this class's methods
  private int age;
}
Person me = new Person();
me.name = "Geoffrey"; // This works
System.out.println(me.age); // This does not work</code></pre>
</div>
</div>
<div class="ulist s">
<ul>
<li>
<p><code>public</code>: the variable can be read or written by anyone</p>
</li>
<li>
<p><code>private</code>: the variable can only read or written by methods defined <em>on that
class</em></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="WGWQeZbaZmTWwTjOaQbZPLFULqrrDnwK">! Variable Access Modifiers</h2>
<div class="sectionbody">
<div class="literalblock janini compiler small">
<div class="content">
<pre>public class Person {
  public String name;
  private int age;
}
public class Example {
  public static void main(String[] unused) {
    Person me = new Person();
    me.name = "Geoffrey"; // This works
    System.out.println(me.age); // This does not work
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="DDjYznJEOUsOqlfygxWWNizNjStwFhQc">Function Access Modifiers</h2>
<div class="sectionbody">
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Person {
  public void printIt() {
    System.out.println("It");
  }
  private void printYou() {
    System.out.println("You");
  }
}
Person me = new Person();
me.printIt(); // This works
me.printYou(); // This does not work</code></pre>
</div>
</div>
<div class="ulist s">
<ul>
<li>
<p><code>public</code>: the method can be called by anyone</p>
</li>
<li>
<p><code>private</code>: the method can only be called by other methods <em>on that class</em></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="iToiPLbiLPmoAciwPXgzIFUtaobXWyHu">! Function Access Modifiers</h2>
<div class="sectionbody">
<div class="literalblock janini compiler small">
<div class="content">
<pre>public class Person {
  public void printIt() {
    System.out.println("It");
  }
  private void printYou() {
    System.out.println("You");
  }
}
public class Example {
  public static void main(String[] unused) {
    Person me = new Person();
    me.printIt(); // This works
    me.printYou(); // This does not work
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="ovZdMlIOhNIIOlRVEavjfSwIYcseibaW">Announcements</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>TC 8 will be out today and due <strong>Sunday</strong> by midnight.
It&#8217;s the first set of object-related Turing&#8217;s Craft exercises.</p>
</li>
<li>
<p><a href="/MP/3/">MP3</a> is out and due a week from Friday.
It&#8217;s your introduction to object-oriented programming, so you&#8217;ll be learning
what you need to complete it in lecture and lab this week.</p>
</li>
<li>
<p>My office hours continue today at 11AM in the lounge outside of Siebel 0226.</p>
</li>
</ul>
</div>
</div>
</div>