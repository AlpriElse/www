<div class="sect1">
<h2 id="NAttUAUHnbhXVjtmWaEFsWvihwLdXzaR">!</h2>
<div class="sectionbody">
<div class="openblock janini smallest compiler">
<div class="content">
<div class="message">Introduction to Recursion</div>
<div class="literalblock">
<div class="content">
<pre>import java.util.Random;

public class Tree {
  Random random = new Random();
  public int value;
  public Tree right;
  public Tree left;

  Tree(int setValue) {
    value = setValue;
  }
  Tree(int[] array) {
    value = array[0];
    for (int i = 1; i &lt; array.length; i++) {
      add(array[i]);
    }
  }

  public void add(int value) {
    if (right == null) {
      right = new Tree(value);
    } else if (left == null) {
      left = new Tree(value);
    } else if (random.nextBoolean()) {
      right.add(value);
    } else {
      left.add(value);
    }
  }

  public String toString() {
    String returnString = "" + value;
    if (left != null) {
      returnString += " " + left.toString();
    }
    if (right != null) {
      returnString += " " + right.toString();
    }
    return returnString;
  }
}

public class Example {
  public static void main(String[] unused) {
    Tree tree = new Tree(new int[] { 1, 2, 3, 4 });
    System.out.println(tree);
  }
}</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="GTUjKBIcByzXwNCjFhjIVSPCZtRNnxMA">Binary Trees</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Binary_tree">A binary tree</a>
is a tree data structure in which each node has <em>at most two children</em>, which are
referred to as the left child and the right child.</p>
</div>
</blockquote>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Tree {
  Object value;
  Tree right;
  Tree left;
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>We are rarely interested in trees <em>only</em> for their structure.
<strong>Usually we use them to structure <em>data</em>.</strong></p>
</div>
</div>
</div>
<div class="sect1 oneword">
<h2 id="xduFGwmqFjHugOllcDUMiGwrQVMnvlpT">Not Every Binary Tree Is A Search Tree</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You&#8217;ll be working with binary <em>search</em> trees in MP5.
They have rules about where elements get added.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="VIGRDurFjDKrtJHWXoOItBZzfjNmhuyW">Subtrees As Trees</h2>
<div class="sectionbody">
<div class="digraph smaller tree TB center">
ranksep=0.15
arrowsize=0.5
1 -> 3
1 -> 5
3 -> 4
4 -> 6
4 -> 8
5 -> 7
5 -> 9
7 -> 10
</div>
<div class="paragraph lead">
<p>Every subtree of a tree is, itself, a tree.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="wAcPTwFgxzPKqUSbvoMgLlMzHdhIvURD">Subtrees As Trees</h2>
<div class="sectionbody">
<div class="digraph smaller tree TB center">
ranksep=0.15
arrowsize=0.3
1 -> 3
1 -> 5
3 -> 4
4 -> 6
4 -> 8
5 -> 7
5 -> 9
7 -> 10
3 [fillcolor="lightblue" style="filled"]
4 [fillcolor="lightblue" style="filled"]
6 [fillcolor="lightblue" style="filled"]
8 [fillcolor="lightblue" style="filled"]
</div>
<div class="paragraph lead">
<p>Every subtree of a tree is, itself, a tree.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="geSkNfwohNjVoDKbFeuCVWYOKyLjSeBf">Subtrees As Trees</h2>
<div class="sectionbody">
<div class="digraph smaller tree TB center">
ranksep=0.15
arrowsize=0.3
1 -> 3
1 -> 5
3 -> 4
4 -> 6
4 -> 8
5 -> 7
5 -> 9
7 -> 10
4 [fillcolor="lightblue" style="filled"]
6 [fillcolor="lightblue" style="filled"]
8 [fillcolor="lightblue" style="filled"]
</div>
<div class="paragraph lead">
<p>Every subtree of a tree is, itself, a tree.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="yZlKteePmvdIFKCujzsReLBuKqurwAMF">Subtrees As Trees</h2>
<div class="sectionbody">
<div class="digraph smaller tree TB center">
ranksep=0.15
arrowsize=0.3
1 -> 3
1 -> 5
3 -> 4
4 -> 6
4 -> 8
5 -> 7
5 -> 9
7 -> 10
6 [fillcolor="lightblue" style="filled"]
</div>
<div class="paragraph lead">
<p>Every subtree of a tree is, itself, a tree.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="IKrnrlKfANGKvLtfVmJfyUCYljkWeZIM">Subtrees As Trees</h2>
<div class="sectionbody">
<div class="digraph smaller tree TB center">
ranksep=0.15
arrowsize=0.3
1 -> 3
1 -> 5
3 -> 4
4 -> 6
4 -> 8
5 -> 7
5 -> 9
7 -> 10
8 [fillcolor="lightblue" style="filled"]
</div>
<div class="paragraph lead">
<p>Every subtree of a tree is, itself, a tree.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="XClsBqbZyhgQixIkbdRePZWxGYZAcMSR">Subtrees As Trees</h2>
<div class="sectionbody">
<div class="digraph smaller tree TB center">
ranksep=0.15
arrowsize=0.3
1 -> 3
1 -> 5
3 -> 4
4 -> 6
4 -> 8
5 -> 7
5 -> 9
7 -> 10
5 [fillcolor="lightblue" style="filled"]
7 [fillcolor="lightblue" style="filled"]
9 [fillcolor="lightblue" style="filled"]
10 [fillcolor="lightblue" style="filled"]
</div>
<div class="paragraph lead">
<p>Every subtree of a tree is, itself, a tree.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="QbskpUtiCqiJOPXrGhjqyPvraOEBBTec">Subtrees As Trees</h2>
<div class="sectionbody">
<div class="digraph smaller tree TB center">
ranksep=0.15
arrowsize=0.3
1 -> 3
1 -> 5
3 -> 4
4 -> 6
4 -> 8
5 -> 7
5 -> 9
7 -> 10
7 [fillcolor="lightblue" style="filled"]
10 [fillcolor="lightblue" style="filled"]
</div>
<div class="paragraph lead">
<p>Every subtree of a tree is, itself, a tree.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="bWmehvUlWmUINYMFUkPLyLsGvlGhliuW">Subtrees As Trees</h2>
<div class="sectionbody">
<div class="digraph smaller tree TB center">
ranksep=0.15
arrowsize=0.3
1 -> 3
1 -> 5
3 -> 4
4 -> 6
4 -> 8
5 -> 7
5 -> 9
7 -> 10
10 [fillcolor="lightblue" style="filled"]
</div>
<div class="paragraph lead">
<p>Every subtree of a tree is, itself, a tree.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="TqusdXRCAUluECOoNJecZeGYsscPPyuN">Subtrees As Trees</h2>
<div class="sectionbody">
<div class="digraph smaller tree TB center">
ranksep=0.15
arrowsize=0.3
1 -> 3
1 -> 5
3 -> 4
4 -> 6
4 -> 8
5 -> 7
5 -> 9
7 -> 10
9 [fillcolor="lightblue" style="filled"]
</div>
<div class="paragraph lead">
<p>Every subtree of a tree is, itself, a tree.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="BvxhRQHsxiezJFxeeABqzcAkFpaevnJW">Recursion</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Recursion">Recursion</a>
occurs when a thing is defined in terms of itself or of its type.</p>
</div>
</blockquote>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Tree {
  Object value;
  Tree right;
  Tree left;
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="xAmoVUmvVpneZytZMbEjYcxLZuqkJQXA">Recursion in Computer Science</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">Recursion in computer science</a>
is a method where the solution to a problem depends on solutions to smaller
instances of the same problem.</p>
</div>
</blockquote>
</div>
</div>
</div>
<div class="sect1">
<h2 id="FoxnoMFQAppSUACkfdnkWWRSscgqYOas">Recursion v. Iteration</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>So far we&#8217;ve pursued <em>iterative</em> algorithms in this course.
Recursion provides us with a new way to approach problems.</p>
</div>
<div class="ulist s">
<ul>
<li>
<p><strong>Iteration</strong>: repeat the same set of steps over and over again</p>
</li>
<li>
<p><strong>Recursion</strong>: break a larger problem into smaller problems until they are
small enough to solve easily</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="CXbapepAVwklaMDmuoiPqFbSVAJeUebp">Tree Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
10 -> H [style=invis]
H [style=invis]
</div>
<div class="paragraph lead">
<p>Let&#8217;s say that we wanted to <em>count</em> the number of nodes in the tree above.</p>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="OvCoXnknGtkaDBejTEyLgMZJExLiflgm">Iterative Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>iteratively</em>:</p>
</div>
<div class="ulist s">
<ul>
<li>
<p>Visit every node in the tree</p>
</li>
<li>
<p>Increment a counter by 1 each time</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="nnWxqgHwUEExSGEDmqadbfPbTWcNcBhZ">Iterative Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
5 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>iteratively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Visit every node in the tree</p>
</li>
<li>
<p>Increment a counter by 1 each time</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="IhRxUhptCPaGjHniiQxTlGqCapbBjZNh">Iterative Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
3 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>iteratively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Visit every node in the tree</p>
</li>
<li>
<p>Increment a counter by 1 each time</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="GQJzNrdbVFFUYEyuzfKPunDgHPVoGtfl">Iterative Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
10 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>iteratively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Visit every node in the tree</p>
</li>
<li>
<p>Increment a counter by 1 each time</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="ANryorqJSjIVSApinwCZypMGNHfvfNCb">Iterative Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
7 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>iteratively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Visit every node in the tree</p>
</li>
<li>
<p>Increment a counter by 1 each time</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="gNuClmdGVhlHDhGaQKWfIivtSDaRtIZX">Iterative Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
9 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>iteratively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Visit every node in the tree</p>
</li>
<li>
<p>Increment a counter by 1 each time</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="QbhSbkoPKXHJVLEyeDnGHUeOhqwwQSje">Iterative Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
1 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>iteratively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Visit every node in the tree</p>
</li>
<li>
<p>Increment a counter by 1 each time</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="vdtElvzcPJwpCGXMJtODWOeUgVECbBuF">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist s">
<ul>
<li>
<p>Break the problem into smaller subproblems</p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="CbTvRBPInPdxlJwpxionzxrJNIIyazmo">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
5 [fillcolor="lightblue" style="filled"]
3 [fillcolor="lightblue" style="filled"]
10 [fillcolor="lightblue" style="filled"]
7 [fillcolor="lightblue" style="filled"]
9 [fillcolor="lightblue" style="filled"]
1 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Break the problem into smaller subproblems</strong></p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="RIUErvzlAkHFLcMMFwJAoTnspgDjTDrg">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
5 [fillcolor="lightblue" style="filled"]
3 [fillcolor="lightpink" style="filled"]
10 [fillcolor="lightsalmon" style="filled"]
7 [fillcolor="lightpink" style="filled"]
9 [fillcolor="lightsalmon" style="filled"]
1 [fillcolor="lightsalmon" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Break the problem into smaller subproblems</strong></p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="DrHSsZyIiciVxgxLsjNoScXnmrRtssSr">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
3 [fillcolor="lightblue" style="filled"]
7 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Break the problem into smaller subproblems</strong></p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="fFKGFHmCzJUmgoGKKlmrmBFuLhkzLbxi">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
3 [fillcolor="lightblue" style="filled"]
7 [fillcolor="lightsalmon" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Break the problem into smaller subproblems</strong></p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="WatZeziNDFbWPXpQjJrFkUhDKRhdoQDT">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
7 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Break the problem into smaller subproblems</strong></p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="EbgWaQISLIIevTZIFjkhOyuCnMXyIGvc">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
10 [fillcolor="lightblue" style="filled"]
9 [fillcolor="lightblue" style="filled"]
1 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Break the problem into smaller subproblems</strong></p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="rMrKsHgwNNSViSKdMLJiBEISbNhWJEvO">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
10 [fillcolor="lightblue" style="filled"]
9 [fillcolor="lightpink" style="filled"]
1 [fillcolor="lightsalmon" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Break the problem into smaller subproblems</strong></p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="rUUmwFSgtMJaUUMWAauAbbIOBCDgSuIF">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
9 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Break the problem into smaller subproblems</strong></p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="yFLwGCQrdZNlnKnfZLFoKzLEhxKfdxvM">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
3 -> 7
10 -> 9
10 -> 1
1 [fillcolor="lightblue" style="filled"]
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Break the problem into smaller subproblems</strong></p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="nUKAQdSZtGAdlUMjsjLmQtXqSJxqNAWv">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
7 -> 3 [ label = "1" dir="back" ]
10 -> 9
10 -> 1
7 [fillcolor="lightblue" style="filled"]
{ rank = same; 10 3 }
{ rank = same; 7 9 1 }
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Break the problem into smaller subproblems</p>
</li>
<li>
<p><strong>Solve the smallest subproblem</strong></p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="pGahsFTTuJwQFvjajZItceokGcAJUAGj">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
7 -> 3 [ label = "1" dir="back" ]
10 -> 9 [ label = "1" dir="back" ]
10 -> 1
9 [fillcolor="lightblue" style="filled"]
{ rank = same; 10 3 }
{ rank = same; 7 9 1 }
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Break the problem into smaller subproblems</p>
</li>
<li>
<p><strong>Solve the smallest subproblem</strong></p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="fWmHFyIxkYtifLOMLqUyFbrBhcWhrxpf">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3
5 -> 10
7 -> 3 [ label = "1" dir="back" ]
10 -> 9 [ label = "1" dir="back" ]
10 -> 1 [ label = "1" dir="back" ]
1 [fillcolor="lightblue" style="filled"]
{ rank = same; 10 3 }
{ rank = same; 7 9 1 }
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Break the problem into smaller subproblems</p>
</li>
<li>
<p><strong>Solve the smallest subproblem</strong></p>
</li>
<li>
<p>Combine the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="DgXwUOGHMeBGCQpcMwKpZCMlvUrPoRxj">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3 [ label = "2" dir="back"]
5 -> 10
7 -> 3 [ label = "1" dir="back" ]
10 -> 9 [ label = "1" dir="back" ]
10 -> 1 [ label = "1" dir="back" ]
3 [fillcolor="lightblue" style="filled"]
7 [fillcolor="lightsalmon" style="filled"]
{ rank = same; 10 3 }
{ rank = same; 7 9 1 }
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Break the problem into smaller subproblems</p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p><strong>Combine the results</strong></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="UDMqLNaCnbtRcGbFzpfnnBQraujrkSVt">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 3 [ label = "2" dir="back"]
5 -> 10 [label = "3" dir="back"]
7 -> 3 [ label = "1" dir="back" ]
10 -> 9 [ label = "1" dir="back" ]
10 -> 1 [ label = "1" dir="back" ]
10 [fillcolor="lightblue" style="filled"]
9 [fillcolor="lightpink" style="filled"]
1 [fillcolor="lightsalmon" style="filled"]
{ rank = same; 10 3 }
{ rank = same; 7 9 1 }
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Break the problem into smaller subproblems</p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p><strong>Combine the results</strong></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1 ss">
<h2 id="nfnNfjwCCoUcNidOkoTGFmWWydKARGtz">Recursive Node Counting</h2>
<div class="sectionbody">
<div class="digraph small tree TB center">
splines="curved"
5 -> 0 [ label="6"]
5 -> 3 [ label = "2" dir="back"]
5 -> 10 [label = "3" dir="back"]
7 -> 3 [ label = "1" dir="back" ]
10 -> 9 [ label = "1" dir="back" ]
10 -> 1 [ label = "1" dir="back" ]
0 [style=invis]
5 [fillcolor="lightblue" style="filled"]
3 [fillcolor="lightpink" style="filled"]
10 [fillcolor="lightsalmon" style="filled"]
7 [fillcolor="lightpink" style="filled"]
9 [fillcolor="lightsalmon" style="filled"]
1 [fillcolor="lightsalmon" style="filled"]
{ rank = same; 10 3 }
{ rank = same; 7 9 1 }
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>We can count <em>recursively</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Break the problem into smaller subproblems</p>
</li>
<li>
<p>Solve the smallest subproblem</p>
</li>
<li>
<p><strong>Combine the results</strong></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="EsCqPUejkjQMBKMESdysCrJtPzzGjPAA">!Recursive Node Counting Example</h2>
<div class="sectionbody">
<div class="literalblock janini compiler smallest">
<div class="content">
<pre>import java.util.Random;

public class Tree {
  Random random = new Random();
  public int value;
  public Tree right;
  public Tree left;

  Tree(int setValue) {
    value = setValue;
  }
  Tree(int[] array) {
    value = array[0];
    for (int i = 1; i &lt; array.length; i++) {
      add(array[i]);
    }
  }

  public void add(int value) {
    if (right == null) {
      right = new Tree(value);
    } else if (left == null) {
      left = new Tree(value);
    } else if (random.nextBoolean()) {
      right.add(value);
    } else {
      left.add(value);
    }
  }

  public int nodeCount() {
  }
}

public class Example {
  public static void main(String[] unused) {
    Tree tree = new Tree(new int[] { 1, 2, 3, 4 });
    System.out.println(tree.nodeCount());
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="SkEchyJagFqdaTrXhQdmsxlSpEYqPLFL">Recursive Implementation</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">int factorial(int n) {
  if (n == 1) {
    return 1;
  } else {
    return n * factorial(n - 1); // I called myself!
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>We refer to a function that calls itself as a <em>recursive function</em>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="IdXQXruptJpAnhOJVkFnLBgrlzoQCoHp">! Recursive Factorial</h2>
<div class="sectionbody">
<div class="literalblock janini smaller">
<div class="content">
<pre>static int factorial(int n) {
  if (n == 1) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}
System.out.println(factorial(4));</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="zoEdUfAzYDVrvVxMJUVxXDDBSXIfNPTZ">Recursive Strategies</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Recursion can be <em>hard</em> to wrap your mind around at first.
But these three strategies will help.</p>
</div>
<div class="olist arabic s">
<ol class="arabic">
<li>
<p><strong>Know when to stop.</strong> When you identify the smallest subproblem, you must
return. Otherwise your program will not terminate. This is also called the <em>base
case</em>.</p>
</li>
<li>
<p><strong>Make the problem smaller in each step.</strong> If the problem doesn&#8217;t get smaller,
you will never reach the base case. This is also called the <em>recursive step</em>.</p>
</li>
<li>
<p><strong>Combine results from your recursive calls properly.</strong></p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mGvjixNfIHVZAwNDVEFaFOMDLWcLAYfs">Recursive Factorial</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">int factorial(int n) {
  if (n == 1) {
    return 1;
  } else {
    return n * factorial(n - 1); // I called myself!
  }
}</code></pre>
</div>
</div>
<div class="ulist s">
<ul>
<li>
<p><strong>Base case:</strong> <span class="s"><code>n == 1</code></span></p>
</li>
<li>
<p><strong>Recursive step:</strong> <span class="s">decrement n towards 1</span></p>
</li>
<li>
<p><strong>Combine results:</strong> <span class="s">multiply current n with the result of the next
subproblem</span></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="oQzICQCZvbKbVVPncvtWmbECnoljnYsn">Reaching Base Camp</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">int factorial(int n) {
  if (n == 1) {
    return 1;
  } else {
    return n * factorial(n - 1); // I called myself!
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p><strong>You must reach the base case.</strong>
Otherwise your problem will never stop, run out of memory, and crash.</p>
</div>
<div class="paragraph">
<p>How can the code above fail to reach the base case?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="wOwqnkFpRKhhMPsjpiOdySSGfHefvzYg">! Recursive Factorial</h2>
<div class="sectionbody">
<div class="literalblock janini smaller">
<div class="content">
<pre>static int factorial(int n) {
  if (n == 1) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}
System.out.println(factorial(-4));</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="kyRSSVsLqAaTMiACrlVQcdeywUZSBGZW">Recursion v. Iteration</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Recursive solutions can be difficult to understand.</p>
</div>
<div class="ulist s">
<ul>
<li>
<p>The goal is to write <em>clear</em> code, not use a particular solution technique.</p>
</li>
<li>
<p>If an iterative solution is more clear, use that.</p>
</li>
<li>
<p>Sometimes a recursive solution is much more clear.</p>
</li>
<li>
<p>Don&#8217;t use recursion just to be cool.</p>
</li>
<li>
<p>Don&#8217;t use recursion because it is fewer lines of code. Who cares? Clarity is
the goal, not brevity.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="moNyvsomOKHFqNeMxcUopkGdOyHclORB">! Iterative Factorial</h2>
<div class="sectionbody">
<div class="literalblock janini smaller">
<div class="content">
<pre>// Don't get too cute...
static int factorial(int n) {
  int result = 1;
  for (int i = 2; i &lt;= n; i++) {
    result *= i;
  }
  return result;
}
System.out.println(factorial(4));</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="IOOCxXrcOvEnrMjoNsixcoECGwxRdHzd">Announcements</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="/MP/4/">MP4</a> is due <em>today</em> at 5PM.</p>
</li>
<li>
<p>MP5 will be released today at 5PM.</p>
</li>
<li>
<p>We&#8217;ve added an
<a href="https://cs125.cs.illinois.edu/info/feedback/">anonymous feedback form</a>
to the course website. Use it to give us feedback!</p>
</li>
<li>
<p>My office hours continue today at 11AM in the lounge outside of Siebel 0226.
I&#8217;ll need to leave at 11:30AM.</p>
</li>
</ul>
</div>
</div>
</div>