<div class="paragraph lead">
<p>Strings are an important data type in every programming language.
And computers are frequently used to <em>transform</em> and <em>analyze</em>
data&mdash;including string data.
While computers understand bits, bytes, and numbers, humans communicate using
letters, words, and sentences.</p>
</div>
<div class="paragraph">
<p>MP1 comprises two string-based tasks that involve straightforward transformation
and modification tasks.
They will introduce you to strings, string representation, and simple state
machines while also providing more practice with loops and algorithms.</p>
</div>
<div class="paragraph">
<p><strong>MP1 is due Friday 2/2/2018 @ 5PM.
To receive full credit, you must submit by this deadline.</strong>
In addition, 10% of your grade on MP1 is for submitting code that earns at least
<em>20 points</em> by <strong>Tuesday 1/30/2018 @ 5PM.</strong>
As usual, late submissions will be subject to the
<a href="/info/syllabus/#regrading">MP late submission policy</a>.</p>
</div>
<div class="sect1">
<h2 id="objectives">1. Learning Objectives</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The purpose of MP1 is to familiarize you with Java strings and string
processing.
You&#8217;ll begin to learn how to:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>interpret text as a series of lines, lines as a series of words, words as
a series of characters, and characters themselves as numbers</p>
</li>
<li>
<p>use simple looping constructs to iterate over arrays of strings and strings
themselves</p>
</li>
<li>
<p>implement a simple state machine</p>
</li>
<li>
<p>correct Javadoc comments</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>We&#8217;ll also continue to reinforce the <a href="/MP/0/#objectives">learning objectives
from MP0</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="structure">2. Assignment Structure</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP1 consists of two short programs:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><a href="https://cs125-illinois.github.io/MP1-Starter/PrintLines.html"><code>PrintLines.java</code></a>:
parses a script and returns lines for a particular actress (or actor)</p>
</li>
<li>
<p><a href="https://cs125-illinois.github.io/MP1-Starter/Encrypt.html"><code>Encrypt.java</code></a>:
encrypts and decrypts text using the so-called
<a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar Cipher</a></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>You may find our official
<a href="https://cs125-illinois.github.io/MP1-Starter/">MP1 online documentation</a>
helpful in understanding what each function is supposed to do.</p>
</div>
<div class="sect2">
<h3 id="getting">2.1. Obtaining MP1</h3>
<div class="paragraph">
<p>Use
<a href="https://classroom.github.com/a/KbU70kpd">this GitHub Classroom invitation link</a>
to fork your copy of MP1.
Once your repository has been created, import it into IntelliJ following
<a href="/MP/setup/git/#workflow">our assignment Git workflow guide</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="requirements">2.2. Your Goal</h3>
<div class="paragraph">
<p>All programs and incomplete and need work.
The structure of each program is similar:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Each contains a <code>main</code> method that solicits input from the user.
<strong>You do not need to modify the <code>main</code> methods</strong>, but you should understand how
they work.</p>
</li>
<li>
<p>User inputs are passed to a separate helper function that you are assigned to
write.
These functions do the heavy lifting for each program: returning an actress&#8217;s
lines (<code>printLinesFor</code>), and encrypting (<code>encrypt</code>) and decrypting (<code>decrypt</code>)
text.</p>
</li>
<li>
<p>Each program includes a test suite: <code>PrintLinesTest.java</code> and
<code>EncryptTest.java</code>.
The test suite does not test the main method.
Instead, it directly tests the method that you are assigned to write.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Your goal is to correctly implement the missing methods so that all of the tests
pass.
Doing so will earn you almost full credit on the assignment&mdash;but see the
section on <a href="#style">style below</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="approach">3. How to Approach MP1</h2>
<div class="sectionbody">
<div class="paragraph">
<p>All of <a href="/MP/0/#approach">the MP0 guidelines</a> still apply.
In addition, let us provide some new advice for MP1.</p>
</div>
<div class="sect2">
<h3 id="_review_code_java_lang_string_code">3.1. Review <code>java.lang.String</code></h3>
<div class="paragraph">
<p>An important part of MP1 is understanding the various methods that you can call
on Java strings.
The best place to find a complete list is the
<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html">Javadoc
documentation for the Java String type</a>.</p>
</div>
<div class="paragraph">
<p>You will definitely want to review the
<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#method_detail">list
of String methods</a> to find things that might be useful.
Specifically, the String methods <code>split</code>, <code>toLowerCase</code>, <code>toUpperCase</code>,
<code>startsWith</code> may be useful in completing MP1&mdash;particularly for
<code>printLinesFor</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_documenting_your_work">3.2. Documenting Your Work</h3>
<div class="paragraph lead">
<p>While comments are not processed by the computer, they are some of the most
important things that you will write (and read) as a software developer.</p>
</div>
<div class="paragraph">
<p>The reason that comments are so important is simple&mdash;while the code you
write is <em>run</em> by a computer, is is <em>used</em> by other human beings.
Regardless of whether a computer can understand what your code is trying to do,
if other people cannot you will be in trouble.
In the open-source community, nobody will be able to use your
contributions&mdash;even if they want to.
At a job, poorly documented code will get you fired extremely quickly.</p>
</div>
<div class="paragraph">
<p>So an important job when writing code is <em>documenting</em> it so that others can use
it.
We will give you practice at doing this on the MPs, and also go over it several
times during lab sections.
But here are some general guidelines to get you started:</p>
</div>
<div class="sect3">
<h4 id="_documentation_for_packages_and_functions_is_extremely_important">3.2.1. Documentation for packages and functions is extremely important</h4>
<div class="paragraph">
<p>This is one of the reasons that we are forcing you to write Javadoc comments,
since they can be easily used to generate documentation.
<a href="https://cs125-illinois.github.io/mazemaker/">Here is an example from this week&#8217;s
lab.</a>
Well-written documentation makes it possible for others to use your code without
understanding your implementation.
That is critical to modern software development.</p>
</div>
</div>
<div class="sect3">
<h4 id="_comments_within_functions_should_be_used_sparingly">3.2.2. Comments within functions should be used sparingly</h4>
<div class="paragraph">
<p>On the other hand, comments <em>within</em> your code should be used sparingly.
They are not a substitute for <a href="#readable">writing clear and readable code</a>.</p>
</div>
<div class="paragraph">
<p>A good way to think about comments in your code is as a chance to explain
something unusual that might confuse another person that is reading your
code&mdash;or, more likely, you!</p>
</div>
<div class="paragraph">
<p>Here&#8217;s a fun example:</p>
</div>
<script
src="https://gist.github.com/gchallen/96122f0e066c2dc1eebc7e6a08e160ab.js"></script>
<div class="paragraph">
<p>And yes&mdash;kudos for comments that are both informative and amusing.
<a href="http://fuzzzyblog.blogspot.com/2014/09/40-most-funny-code-comments.html">Here are
some good examples.</a></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="readable">3.3. Writing Readable Code</h3>
<div class="paragraph">
<p>Comments and documentation are not a substitute for writing reading code.
Think of it this way&mdash;documentation is for others that will try to use your
code, including collaborators and co-workers.
Comments document unusual situations, but are primarily for you, not for others,
since you&#8217;re the one who&#8217;s most likely to have to read (and probably debug) your
code.</p>
</div>
<div class="paragraph">
<p>Readable code is even more important for you and you alone.
So treat writing code that is clear and easy to understand as personal and
selfish challenge, since it is most likely to benefit you.</p>
</div>
<div class="sect3">
<h4 id="_good_variable_names">3.3.1. Good variable names</h4>
<div class="paragraph">
<p>One basic aspect of writing good code is good choices of variable names.
A good variable name should allow me to understand how it is being used
<em>without</em> reading much of the code.</p>
</div>
<div class="paragraph">
<p>Good variable names depend a lot on context, but one good practice to get in to
is to <strong>avoid generic names</strong> like <code>i</code>, <code>j</code>, <code>index</code>, <code>count</code>, etc.
Try more specific names like <code>indexInString</code>, <code>countOfLetters</code>, etc.
<code>count</code> could be anything&mdash;whereas <code>countOfLetters</code> lets me know more about
what is being counted.
Keystrokes are cheap, understanding is expensive.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_getting_help">3.4. Getting Help</h3>
<div class="paragraph">
<p>The course staff is ready and willing to help you every step of the way!
Please come to <a href="/info/syllabus/#calendar">office hours</a>, or post on the
<a href="https://cs125-forum.cs.illinois.edu/c/mps/mp1" class="noexternal">forum</a> when you need help.
You should also feel free to help each other, as long as you do not violate the
<a href="#cheating">academic integrity requirements</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="grading">4. Grading</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP1 is worth 100 points total, broken down as follows:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>40 points</strong>: <code>PrintLines.java</code></p>
<div class="ulist">
<ul>
<li>
<p><strong>10 points</strong> for submitting code that compiles</p>
</li>
<li>
<p><strong>30 points</strong> for passing the test</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>40 points</strong>: <code>Encrypt.java</code></p>
<div class="ulist">
<ul>
<li>
<p><strong>10 points</strong> for submitting code that compiles</p>
</li>
<li>
<p><strong>30 points</strong> for passing the test</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>10 points</strong> for no <code>checkstyle</code> violations</p>
</li>
<li>
<p><strong>10 points</strong> for submitting code that earns at least 20 points before <strong>Tuesday
1/30/2018 @ 5PM.</strong></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Programming is a skill, and you learn it with regular consistent practice.
If you wait until the day of the deadline, it&#8217;s unlikely that you&#8217;ll get as much
practice and learn as much as if you start early.
When you give yourself enough time to complete the MP, you can also slow down,
enjoy yourself, and do things right.
Take a few extra minutes to learn more about a library that you&#8217;re using, or
clean up your code so that it really shines.
The earlier you start, the more likely you&#8217;ll do some of these useful things.</p>
</div>
<div class="paragraph">
<p>So, we&#8217;re going to incentive you starting on time.
10% of MP2 is earned by submitting something that earns 20 points by <strong>Tuesday
1/30/2018 @ 5PM.</strong>
You don&#8217;t have to do much to get 20 points, but we hope that it will get you
reading and think about the MP before the end of the week, when office hours are
packed.</p>
</div>
<div class="sect2">
<h3 id="testing">4.1. Test Cases</h3>
<div class="paragraph">
<p>Like <a href="/MP/0">MP0</a>, we have provided exhaustive test cases for each part of
MP1.
Please review the <a href="/MP/0#testing">MP0 testing instructions</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="autograding">4.2. Autograding</h3>
<div class="paragraph">
<p>Like <a href="/MP/0">MP0</a>, we have provided you with an autograding script that you
can use to estimate your current grade as often as you want.
Please review the <a href="/MP/0#autograding">MP0 autograding instructions</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="style">4.3. Style Points</h3>
<div class="paragraph">
<p>Review the <a href="/MP/0#style">style notes from MP0</a>.
For MP1 you will have to correct some existing style errors.
Please look at the Javadoc comments on other provided functions for examples of
how to use the <code>@param</code> and <code>@return</code> tag.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="submitting">5. Submitting Your Work</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Follow the instructions from the
<a href="/MP/setup/git#submitting">submitting portion</a>
of the
<a href="/MP/setup/git#workflow">CS 125 workflow</a>
instructions.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cheating">6. Cheating</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Please review the
<a href="/info/syllabus#cheating">CS 125 cheating policies</a>.</p>
</div>
<div class="paragraph">
<p>All submitted MP source code will be checked by automated plagiarism detection
software.
<strong>Cheaters will receive stiff penalties&mdash;the hard-working students in the
class that are willing to struggle for their grade demand it.</strong></p>
</div>
</div>
</div>