<div class="paragraph lead">
<p>Maybe you play them, maybe you don&#8217;t, maybe you carry your gaming desktop with
you at all times&mdash;but regardless of how you feel about it, a fair number of
people use computers to play games.
Some of those games can be instructive, some can be fun.
But an MP where you get to build a fun game is both fun <em>and</em> instructive!
For MP3 you&#8217;ll be learning Java class design and object-oriented programming as
you complete a simple Connect-4-like game.</p>
</div>
<div class="paragraph">
<p><strong>MP3 is our first two week MP and due Friday 2/23/2018 @ 5PM.
To receive full credit, you must submit by this deadline.</strong>
In addition, 10% of your grade on MP3 is for submitting code that earns at least
<em>40 points</em> by <strong>Friday 2/16/2018 @ 5PM.</strong>
Note that, unlike <a href="/MP/2">MP2</a>, you have to do a bit more work on MP3 to get
to 40 points&mdash;but the early deadline is also later to accommodate that.</p>
</div>
<div class="paragraph">
<p>As usual, late submissions will be subject to the
<a href="/info/syllabus/#regrading">MP late submission policy</a>.</p>
</div>
<div class="sect1">
<h2 id="objectives">1. Learning Objectives</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The purpose of MP3 is to begin introducing you to object-oriented programming.
MP3 does not explore more advanced topics like inheritance, interfaces, or
polymorphism.
It sticks to the basics: instance and class variables, getters and setters,
constructors, and instance and class methods.
You&#8217;ll begin to learn how to:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>design a class that meets a given specification</p>
</li>
<li>
<p>implement that class including both properly-protected variables and
appropriate methods</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>We&#8217;ll also continue to reinforce the learning objectives from <a href="/MP/0/">MP0</a>,
<a href="/MP/1/">MP1</a>, and <a href="/MP/2/">MP2</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="structure">2. Assignment Structure</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP3 consists of a simple client-server system.
The HTML, CSS, and JavaScript for the client are provided for you.
But it relies on your backend to work properly.</p>
</div>
<div class="paragraph">
<p>Your job is to create and complete <code>ConnectN.java</code>.
These functions are called by the web server that is set up using <code>WebServer.java</code>.</p>
</div>
<div class="paragraph">
<p>MP3 provides a bit less scaffolding than previous MPs.
This is intentional.
Eventually you&#8217;ll need to write code from scratch, and frequently you&#8217;ll need to
follow a specification written by other developers or a project manager.</p>
</div>
<div class="paragraph">
<p>For MP3, the official specification is our
<a href="https://cs125-illinois.github.io/MP3-Starter/ConnectN.html">MP3 online documentation</a>.
It should precisely define what each public method in <code>ConnectN.java</code> should do.
If you believe that the documentation is unclear, please post on
the <a href="https://cs125-forum.cs.illinois.edu/c/mps/mp3" class="noexternal">forum</a> and we&#8217;ll offer a clarification is needed.</p>
</div>
<div class="sect2">
<h3 id="getting">2.1. Obtaining MP3</h3>
<div class="paragraph">
<p>Use
<a href="https://classroom.github.com/a/dDWeWpgw">this GitHub Classroom invitation link</a>
to fork your copy of MP3.
Once your repository has been created, import it into IntelliJ following
<a href="/MP/setup/git/#workflow">our assignment Git workflow guide</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="requirements">2.2. Your Goal</h3>
<div class="paragraph">
<p>At this point you should be familiar with the requirements from previous MPs.
See the <a href="#grading">grading description below</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="running">2.3. Running MP3</h3>
<div class="row justify-content-center mt-3 mb-3">
  <div class="col-12 col-lg-8">
    <div class="embed-responsive embed-responsive-4by3">
      <iframe class="embed-responsive-item" width="560" height="315" src="//www.youtube.com/embed/rZ306uoFhlk" allowfullscreen></iframe>
    </div>
  </div>
</div>
<div class="paragraph">
<p>To experiment with the web interface, do the following:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Run <code>WebServer.java</code> as a Java application.
You&#8217;ll need to at least create <code>ConnectN.java</code> and get a few things working
before the web server will run at all.</p>
</li>
<li>
<p>Open your web browser and navigate to <a href="http://localhost:8126"><code>http://localhost:8126</code></a>.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>At first, nothing will work because you have not implemented any of the required
game transformation functions yet.
But you may want to experiment with your browser using
<a href="https://cs125.cs.illinois.edu/MP/3/solution/">our solution</a>
to see how things are supposed to work.</p>
</div>
<div class="paragraph">
<p>As far as browser support, we have confirmed that
<a href="https://www.google.com/chrome/browser/desktop/index.html">Chrome</a>
works.
Other browsers may or may not&mdash;but Chrome definitely does.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="approach">3. Approaching MP3</h2>
<div class="sectionbody">
<div class="paragraph">
<p>While the concepts are new, MP3 is not a lot of code to write, and you have two
weeks.
But here are the bits that are likely to trip you up.</p>
</div>
<div class="sect2">
<h3 id="_read_the_fine_manual">3.1. Read the Fine Manual</h3>
<div class="paragraph">
<p>To complete MP3 you <em>must</em> understand the
<a href="https://cs125-illinois.github.io/MP3-Starter/">specification</a>.
That&#8217;s your starting point, and your returning point when you get confused.</p>
</div>
<div class="paragraph">
<p>Writing code to a specification is an important skill to learn.
In many software companies, designing code and implementing it are not always
done by the same group.
A project manager or program manager may write a specification, which is
provided to developers to implement.
Or a team of developers may come up with a specification, and then divide up the
implementation work between them.</p>
</div>
<div class="paragraph">
<p>Regardless of where it comes from, writing code in groups almost always requires
a specification to be successful&mdash;unlike when you do independent projects
and can make up things as you go.
A lot of the design work and high-level decisions end up going in to the
specification, so by the time the implementation begins the hard and interesting
choices have been made.
That&#8217;s not to say it still isn&#8217;t fun at that point&mdash;even developing to a
spec provides huge opportunities for simultaneous creativity and correctness in
that unique programming way.</p>
</div>
</div>
<div class="sect2">
<h3 id="_getters_and_setters">3.2. Getters and Setters</h3>
<div class="paragraph">
<p>MP3 requires you to implement some simple getters and setters (just return or
change the variable), and some ones with more complicated behavior.
Be sure to read the documentation carefully.</p>
</div>
</div>
<div class="sect2">
<h3 id="_game_logic">3.3. Game Logic</h3>
<div class="paragraph">
<p>You will need to do a bit of work to implement the game board.
ConnectN is a Connect-4-like game.
Tiles fall in the top (large Y values) and sit at the bottom.
Just to confuse you a bit, we&#8217;ve reversed the coordinates from last week.
So we&#8217;re now in the proper first quadrant of 2D space, with X values going left
to right and Y values going down to up:</p>
</div>
<table class="tableblock frame-all grid-all spread table-bordered">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(0, 2)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(1, 2)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(2, 2)</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(0, 1)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(1, 1)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(2, 1)</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(0, 0)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(1, 0)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(2, 0)</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>A ConnectN game ends when either player plays N consecutive tiles in either a
single row or column <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup>.
Tiles always have to be played at the lowest possible location in each
column&mdash;in a real Connect-4 board they fall downward and rest on the tiles
below them.
Consult the <a href="https://en.wikipedia.org/wiki/Connect_Four">Wikipedia</a> page for more
details.</p>
</div>
</div>
<div class="sect2">
<h3 id="_class_variables_and_methods">3.4. Class Variables and Methods</h3>
<div class="paragraph">
<p>Classes can define methods and variables that are not attached to instances.
See <code>Player.java</code> for an example of a class variable used to provide each
instance with a unique ID.
You&#8217;ll need to implement some of these for <code>ConnectN.java</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_equality">3.5. Equality</h3>
<div class="paragraph">
<p>Be careful about varying definitions of equality.
You&#8217;ll need to implement <code>ConnectN.equals</code>, but it&#8217;s definition of equality is
quite strict.
On the other hand, the class comparison methods use a different definition of
equality.
Passing all of the tests requires distinguishing between the two and
implementing each correctly.</p>
</div>
</div>
<div class="sect2">
<h3 id="_getting_help">3.6. Getting Help</h3>
<div class="paragraph">
<p>The course staff is ready and willing to help you every step of the way!
Please come to <a href="/info/syllabus/#calendar">office hours</a>, or post on the
<a href="https://cs125-forum.cs.illinois.edu/c/mps/mp3" class="noexternal">forum</a> when you need help.
You should also feel free to help each other, as long as you do not violate the
<a href="#cheating">academic integrity requirements</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="grading">4. Grading</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP3 is worth 100 points total, broken down as follows:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>80 points</strong>: <code>ConnectN.java</code></p>
<div class="ulist">
<ul>
<li>
<p><strong>5 points</strong> for completing the title modifications</p>
</li>
<li>
<p><strong>15 points total</strong> for completing the width, height, and N value getters and
setters</p>
</li>
<li>
<p><strong>10 points</strong> for completing the constructors</p>
</li>
<li>
<p><strong>15 points</strong> for completing the get and set board functions</p>
</li>
<li>
<p><strong>10 points</strong> for determining the game winner properly</p>
</li>
<li>
<p><strong>10 points</strong> for calculating equality correctly</p>
</li>
<li>
<p><strong>10 points</strong> for class static methods, including equality checks and factory
creation methods</p>
</li>
<li>
<p><strong>5 points</strong> for maintaining the game count and ID properly</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>10 points</strong> for no <code>checkstyle</code> violations</p>
</li>
<li>
<p><strong>10 points</strong> for submitting code that earns at least 40 points before <strong>Friday
2/16/2018 @ 5PM.</strong></p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="testing">4.1. Test Cases</h3>
<div class="paragraph">
<p>As in previous MPs, we have provided exhaustive test cases
for each part of MP3.
Please review the <a href="/MP/0/#testing">MP0 testing instructions</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="autograding">4.2. Autograding</h3>
<div class="paragraph">
<p>Like <a href="/MP/0">MP0</a> and <a href="/MP/1/">MP1</a>, we have provided you with an
autograding script that you can use to estimate your current grade as often as
you want.
Please review the <a href="/MP/0#autograding">MP0 autograding instructions</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="submitting">5. Submitting Your Work</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Follow the instructions from the
<a href="/MP/setup/git#submitting">submitting portion</a>
of the
<a href="/MP/setup/git#workflow">CS 125 workflow</a>
instructions.</p>
</div>
<div class="paragraph">
<p>And remember, you must submit something that earns 40 points before <strong>Friday
2/16/2018 @ 5PM</strong> to earn 10 points on the assignment.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cheating">6. Academic Integrity</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Please review the <a href="/MP/0#cheating">MP0 academic integrity guidelines</a>.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s how <em>we&#8217;ll</em> feel if we catch you cheating in CS 125:</p>
</div>
<div class="row justify-content-center mt-3 mb-3">
  <div class="col-12 col-lg-8">
    <div class="embed-responsive embed-responsive-4by3">
      <iframe class="embed-responsive-item" width="560" height="315" src="//www.youtube.com/embed/1-BfDBTFLSc" allowfullscreen></iframe>
    </div>
  </div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. There: I said row and column.
</div>
</div>