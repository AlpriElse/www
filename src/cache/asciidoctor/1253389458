<div class="paragraph lead">
<p>Strings are an important data type in every programming language.
While computers understand bits, bytes, and numbers, humans communicate using
letters, words, and sentences.</p>
</div>
<div class="paragraph">
<p>MP2 comprises three string-based programming tasks that will familiarize you
with strings and string processing.
<strong>It is due Friday, September 29th, 2017 @ 5PM. To receive full credit, you must
submit by this deadline.</strong></p>
</div>
<div class="sect1">
<h2 id="objectives">1. Learning Objectives</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The purpose of MP2 is to familiarize you with Java strings and string
processing.
You&#8217;ll begin to learn how to:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>interpret text as a series of lines, lines as a series of words, and words as
a series of characters</p>
</li>
<li>
<p>use simple looping constructs to iterate over arrays of strings and strings
themselves</p>
</li>
<li>
<p>implement simple state machines</p>
</li>
<li>
<p>write function definitions</p>
</li>
<li>
<p>correct Javadoc comments</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>We&#8217;ll also continue to reinforce the <a href="/MP/2017/fall/1/#objectives">learning objectives
from MP1</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="structure">2. Assignment Structure</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP2 consists of three short programs:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><a href="https://cs125-illinois.github.io/Fall-2017-MP2/FindLine.html"><code>FindLine.java</code></a>:
finds lines in provided multi-line text</p>
</li>
<li>
<p><a href="https://cs125-illinois.github.io/Fall-2017-MP2/ScriptPrinter.html"><code>ScriptPrinter.java</code></a>:
parses a script and returns lines for a particular actress (or actor)</p>
</li>
<li>
<p><a href="https://cs125-illinois.github.io/Fall-2017-MP2/StrictPalindrome.html"><code>StrictPalindrome.java</code></a>:
tests whether a provided string is a palindrome</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>You may find our official
<a href="https://cs125-illinois.github.io/Fall-2017-MP2/">MP2 online documentation</a>
helpful in understanding what each function is supposed to do.</p>
</div>
<div class="sect2">
<h3 id="getting">2.1. Obtaining MP2</h3>
<div class="paragraph">
<p>Please follow the instructions from <a href="/MP/2017/fall/1/#getting">MP1</a>.
You&#8217;ll find MP2 in an <code>MP2</code> folder in your Subversion home directory.</p>
</div>
<div class="sect3">
<h4 id="deleted">2.1.1. Recovering in case of accidental deletion</h4>
<div class="paragraph">
<p>If for some reason you delete you original copy, there are
<a href="https://stackoverflow.com/questions/497423/how-to-undelete-a-file-with-subversive">ways
to get it back using Subversion</a>
<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup>.</p>
</div>
<div class="paragraph">
<p>Unlike MP1, we will not provide a tarball.
If you delete your MP2 for whatever reason, you will need to recover it using
Subversion.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="requirements">2.2. Your Goal</h3>
<div class="paragraph">
<p>All programs and incomplete and need work.
The structure of each program is similar:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Each contains a <code>main</code> method that solicits input from the user.
<strong>You do not need to modify the <code>main</code> methods</strong>, but you should understand how
they work.</p>
</li>
<li>
<p>User inputs are passed to a separate helper function that you are assigned to
write.
These functions do the heavy lifting for each program: searching text
(<code>printMatchingLines</code>), returning an actress&#8217;s lines (<code>printLinesFor</code>), and
testing whether a string is a palindrome (<code>isStrictPalindrome</code>).</p>
</li>
<li>
<p>Each program includes a test suite: <code>FindLineTest.java</code>, <code>ScriptPrinterTest.java</code>,
and <code>StrictPalindromeTest.java</code>.
The test suite does not test the main method.
Instead, it directly tests the method that you are assigned to write.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Your goal is to correctly implement the missing methods so that all of the tests
pass.
Doing so will earn you almost full credit on the assignment&mdash;but see the
section on <a href="#style">style below</a>.
<strong>In contrast to last week, you may need to add methods and fix checkstyle
errors right out of the box.</strong>
Until you fix these problems, your initial grade on MP2 will be a zero.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="approach">3. How to Approach MP2</h2>
<div class="sectionbody">
<div class="paragraph">
<p>All of <a href="/MP/2017/fall/1/#approach">the MP1 guidelines</a> still apply.
In addition, let us provide some new advice for MP2.</p>
</div>
<div class="sect2">
<h3 id="_review_code_java_lang_string_code">3.1. Review <code>java.lang.String</code></h3>
<div class="paragraph">
<p>An important part of MP2 is understanding the various methods that you can call
on Java strings.
The best place to find a complete list is the
<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html">Javadoc
documentation for the Java String type</a>.</p>
</div>
<div class="paragraph">
<p>You will definitely want to review the
<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#method_detail">list
of String methods</a> to find things that might be useful.
Specifically, the String methods <code>split</code>, <code>toLowerCase</code>, <code>toUpperCase</code>,
<code>startsWith</code> may be useful in completing MP2.</p>
</div>
</div>
<div class="sect2">
<h3 id="_documenting_your_work">3.2. Documenting Your Work</h3>
<div class="paragraph lead">
<p>While comments are not processed by the computer, they are some of the most
important things that you will write (and read) as a software developer.</p>
</div>
<div class="paragraph">
<p>The reason that comments are so important is simple&mdash;while the code you
write is <em>run</em> by a computer, is is <em>used</em> by other human beings.
Regardless of whether a computer can understand what your code is trying to do,
if other people cannot you will be in trouble.
In the open-source community, nobody will be able to use your
contributions&mdash;even if they want to.
At a job, poorly documented code will get you fired extremely quickly.</p>
</div>
<div class="paragraph">
<p>So an important job when writing code is <em>documenting</em> it so that others can use
it.
We will give you practice at doing this on the MPs, and also go over it several
times during lab sections.
But here are some general guidelines to get you started:</p>
</div>
<div class="sect3">
<h4 id="_documentation_for_packages_and_functions_is_extremely_important">3.2.1. Documentation for packages and functions is extremely important</h4>
<div class="paragraph">
<p>This is one of the reasons that we are forcing you to write Javadoc comments,
since they can be easily used to generate documentation.
<a href="https://cs125-illinois.github.io/mazemaker/">Here is an example from a previous
lab.</a>
Well-written documentation makes it possible for others to use your code without
understanding your implementation.
That is critical to modern software development.</p>
</div>
</div>
<div class="sect3">
<h4 id="_comments_within_functions_should_be_used_sparingly">3.2.2. Comments within functions should be used sparingly</h4>
<div class="paragraph">
<p>On the other hand, comments <em>within</em> your code should be used sparingly.
They are not a substitute for <a href="#readable">writing clear and readable code</a>.</p>
</div>
<div class="paragraph">
<p>A good way to think about comments in your code is as a chance to explain
something unusual that might confuse another person that is reading your
code&mdash;or, more likely, you!</p>
</div>
<div class="paragraph">
<p>Here&#8217;s a fun example:</p>
</div>
<script
src="https://gist.github.com/gchallen/96122f0e066c2dc1eebc7e6a08e160ab.js"></script>
<div class="paragraph">
<p>And yes&mdash;bonus points are given for comments that are both informative and
amusing.
<a href="http://fuzzzyblog.blogspot.com/2014/09/40-most-funny-code-comments.html">Here are
some good examples.</a></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="readable">3.3. Writing Readable Code</h3>
<div class="paragraph">
<p>Comments and documentation are not a substitute for writing reading code.
Think of it this way&mdash;documentation is for others that will try to use your
code, including collaborators and co-workers.
Comments document unusual situations, but are primarily for you, not for others,
since you&#8217;re the one who&#8217;s most likely to have to read (and probably debug) your
code.</p>
</div>
<div class="paragraph">
<p>Readable code is even more important for you and you alone.
So treat writing code that is clear and easy to understand as personal and
selfish challenge, since it is most likely to benefit you.</p>
</div>
<div class="sect3">
<h4 id="_good_variable_names">3.3.1. Good variable names</h4>
<div class="paragraph">
<p>One basic aspect of writing good code is good choices of variable names.
A good variable name should allow me to understand how it is being used
<em>without</em> reading much of the code.</p>
</div>
<div class="paragraph">
<p>Good variable names depend a lot on context, but one good practice to get in to
is to <strong>avoid generic names</strong> like <code>i</code>, <code>j</code>, <code>index</code>, <code>count</code>, etc.
Try more specific names like <code>indexInString</code>, <code>countOfLetters</code>, etc.
<code>count</code> could be anything&mdash;whereas <code>countOfLetters</code> lets me know more about
what is being counted.
Keystrokes are cheap, understanding is expensive.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_getting_help">3.4. Getting Help</h3>
<div class="paragraph">
<p>The course staff is ready and willing to help you every step of the way!
Please come to <a href="/info/2017/fall/syllabus/#calendar">office hours</a>, or post on the
<a href="https://cs125-forum.cs.illinois.edu" class="noexternal">forum</a> when you need help.
You should also feel free to help each other, as long as you do not violate the
<a href="#cheating">academic integrity requirements</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="grading">4. Grading</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP2 is worth 100 points total, broken down as follows:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>30 points</strong>: <code>FindLine.java</code></p>
<div class="ulist">
<ul>
<li>
<p><strong>10 points</strong> for submitting code that compiles</p>
</li>
<li>
<p><strong>20 points</strong> for passing the test</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>30 points</strong>: <code>ScriptPrinter.java</code></p>
<div class="ulist">
<ul>
<li>
<p><strong>10 points</strong> for submitting code that compiles</p>
</li>
<li>
<p><strong>20 points</strong> for passing the test</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>30 points</strong>: <code>StrictPalindrome.java</code></p>
<div class="ulist">
<ul>
<li>
<p><strong>10 points</strong> for submitting code that compiles</p>
</li>
<li>
<p><strong>20 points</strong> for passing the test</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>10 points</strong> for no <code>checkstyle</code> violations</p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="testing">4.1. Test Cases</h3>
<div class="paragraph">
<p>Like <a href="/MP/2017/fall/1">MP1</a>, we have provided exhaustive test cases for each part of
MP2.
Please review the <a href="/MP/2017/fall/1/#testing">MP1 testing instructions</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="autograding">4.2. Autograding</h3>
<div class="paragraph">
<p>Like <a href="/MP/2017/fall/1/">MP1</a>, we have provided you with an autograding script that you
can use to estimate your current grade as often as you want.
The Eclipse project contains a launcher that will run MP2 autograder.</p>
</div>
<div class="paragraph">
<p>Unless you have modified the test cases or autograder configuration files, the
autograding output should equal the score that you will earn when you submit.
If you modify our test cases or the autograding configuration, all bets are off.</p>
</div>
</div>
<div class="sect2">
<h3 id="style">4.3. Style Points</h3>
<div class="paragraph">
<p>First, review the <a href="/MP/2017/fall/1/#style">style notes from MP1</a>.</p>
</div>
<div class="paragraph">
<p>However, for MP2 you will have to correct some existing style errors.
Please look at the Javadoc comments on other provided functions for examples of
how to use the <code>@param</code> and <code>@return</code> tag.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="submitting">5. Submitting Your Work</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Overall you should refer to <a href="/MP/setup/subversion">our instructions for using
Subversion</a>.
Commit early and often!
You only earn credit for the version of your code that is committed to your
repository, so ensure that we have your best submission before the deadline.</p>
</div>
<div class="sect2">
<h3 id="cheating">5.1. Academic Integrity</h3>
<div class="paragraph">
<p>Please review the <a href="/MP/2017/fall/1/">MP1 academic integrity guidelines</a>.</p>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Since this is one of the main reasons for using version control!
</div>
</div>