<div class="paragraph lead">
<p>Let&#8217;s start hacking!
MP0 challenges you to complete three small programming tasks.
It also introduces you to the development workflow we&#8217;ll use throughout the rest
of the semester.</p>
</div>
<div class="paragraph">
<p><strong>MP0 is due Friday 1/26/2018 @ 5PM.
To receive full credit, you must submit by this deadline.</strong>
Late submissions will be subject to the
<a href="/info/syllabus/#regrading">MP late submission policy</a>.</p>
</div>
<div class="sect1">
<h2 id="objectives">1. Learning Objectives</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The purpose of MP0 is to get you started programming in Java.
Specifically, it begins to train you to:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>initialize and use variables of appropriate types</p>
</li>
<li>
<p>perform simple calculations using integer arithmetic</p>
</li>
<li>
<p>use simple loops and conditional statements</p>
</li>
<li>
<p>translate program descriptions into working code</p>
</li>
<li>
<p>work with test suites as part of your development process</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="structure">2. Assignment Structure</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP0 consists of three short programs:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>LCM.java</code>: computes the
<a href="https://en.wikipedia.org/wiki/Least_common_multiple">least common multiple</a>
of two integers</p>
</li>
<li>
<p><code>MaximumOfLastN.java</code>: returns the maximum of last N values of an array of floats</p>
</li>
<li>
<p><code>Quizzer.java</code>: computes a score for a short quiz</p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="getting">2.1. Obtaining MP0</h3>
<div class="paragraph">
<p>Use
<a href="https://classroom.github.com/a/qa9fBqpA">this GitHub Classroom invitation link</a>
to fork your copy of MP0.
Once your repository has been created, import it into IntelliJ following
<a href="/MP/setup/git/#workflow">our assignment Git workflow guide</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="requirements">2.2. Your Goal</h3>
<div class="paragraph">
<p>All three programs need to be completed.
The structure of each is similar:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Each contains a <code>main</code> method that solicits input from the user.
<strong>You do not need to modify the <code>main</code> methods</strong>, but you may want to read them
and try to figure out how they work.</p>
</li>
<li>
<p>User inputs are passed to a separate helper function that you are assigned to
write.
These functions do the heavy lifting for each program: computing the least
common multiple (<code>lcm</code>), returning the maximum (<code>maximumOfLastN</code>), and computing
the quiz score (<code>computeScore</code>).</p>
</li>
<li>
<p>Each program includes a test suite: <code>LCMTest.java</code>, <code>MaximumOfLastNTest.java</code>,
and <code>QuizzerTest.java</code>.
The test suite does not test the main method.
Instead, it directly tests the method that you are assigned to write.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Your goal is to correctly implement the missing methods so that all of the tests
pass.
Doing so will earn you almost full credit on the assignment&mdash;but see the
section on <a href="#style">style below</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="approach">3. How to Approach MP0</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Although MP0 may seem daunting at first, do not get discouraged!
Focus on identifying what you need to do and understanding the requirements of
each function.
There is really not a huge amount of code for you to write&mdash;our solution
adds only several dozen lines, although yours may be slightly longer.</p>
</div>
<div class="sect2">
<h3 id="_understanding_what_you_need_to_do">3.1. Understanding What You Need to Do</h3>
<div class="paragraph">
<p>A core task when approaching any programming assignment or task is to <em>identify
what you need to do</em>.
For MP0 there are three&mdash;and only three&mdash;functions that you need to
change.
Begin by identifying those functions and understanding their requirements.
This will go <strong>a long way</strong> to helping you complete the MP.</p>
</div>
</div>
<div class="sect2">
<h3 id="_fixing_initial_errors">3.2. Fixing Initial Errors</h3>
<div class="paragraph">
<p>Your initial clone of MP0 will receive 0 points.
That&#8217;s intentional!
But once you fix a few small bugs you&#8217;re score will improve quickly.
In fact, it&#8217;s possible to get 40 points for code that doesn&#8217;t pass any of the
tests&mdash;as long as it compiles and runs.</p>
</div>
<div class="paragraph">
<p>Use IntelliJ to help you here.
It can intelligently identify problems with your MP and guide you toward
solutions.</p>
</div>
</div>
<div class="sect2">
<h3 id="_test_driven_development">3.3. Test-driven Development</h3>
<div class="paragraph">
<p>We have provided you with testing suites that you can use to perform iterative
test-driven development.
You should integrate this process into your normal
<a href="/MP/setup/git#workflow">CS 125 Git workflow</a>.
Here&#8217;s how that works:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Start with one function that you need to write for MP0&mdash;say <code>lcm</code>
in <code>LCM.java</code>.</p>
</li>
<li>
<p>Open <code>LCM.java</code>.
Run the assignment test suite, which is installed as run configuration "Test
MP0".
Without changes to <code>LCM.java</code>, it should fail.</p>
</li>
<li>
<p>Begin modifying the <code>lcm</code> function.
When you think that you have a solution, save you work and re-run the test
suite.</p>
</li>
<li>
<p>If the test suite succeeds, you&#8217;re done&mdash;congratulations!</p>
</li>
<li>
<p>If the test suite fails, you may want to run <code>LCM.java</code> as a Java
application and interact with it to determine what is wrong.
Perhaps you are calculating the least common multiple correctly when the first
value is greater than the second, but not if the second is greater than the
first.
Interactive testing can help diagnose these kinds of problems.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>In general <strong>the fewer lines of code you write before running a test, the
better.</strong>
When you are starting out, it is easy to introduce bugs into your code.
Bugs are easiest to catch one-by-one, and so the fewer lines of untested code
the more likely you are to identify errors in your logic or implementation.</p>
</div>
</div>
<div class="sect2">
<h3 id="_getting_help">3.4. Getting Help</h3>
<div class="paragraph">
<p>The course staff is ready and willing to help you every step of the way!
Please come to <a href="/info/syllabus/#calendar">office hours</a>, or post on the
<a href="https://cs125-forum.cs.illinois.edu/c/mps/mp0" class="noexternal">forum</a> when you need help.
You should also feel free to help each other, as long as you do not violate the
<a href="#cheating">academic integrity requirements</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="grading">4. Grading</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP0 is worth 100 points total, broken down as follows:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>30 points</strong>: <code>LCM.java</code></p>
<div class="ulist">
<ul>
<li>
<p><strong>10 points</strong> for submitting code that compiles</p>
</li>
<li>
<p><strong>20 points</strong> for passing the test</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>30 points</strong>: <code>MaximumOfLastN.java</code></p>
<div class="ulist">
<ul>
<li>
<p><strong>10 points</strong> for submitting code that compiles</p>
</li>
<li>
<p><strong>20 points</strong> for passing the test</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>30 points</strong>: <code>Quizzer.java</code></p>
<div class="ulist">
<ul>
<li>
<p><strong>10 points</strong> for submitting code that compiles</p>
</li>
<li>
<p><strong>20 points</strong> for passing the test</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>10 points</strong> for no <code>checkstyle</code> violations</p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="submitting">4.1. Submitting Your Work</h3>
<div class="paragraph">
<p>Follow the instructions from the
<a href="/MP/setup/git#submitting">submitting portion</a>
of the
<a href="/MP/setup/git#workflow">CS 125 workflow</a>
instructions.</p>
</div>
</div>
<div class="sect2">
<h3 id="testing">4.2. Test Cases</h3>
<div class="paragraph">
<p>You should carefully review the test cases in <code>LCMTest.java</code>,
<code>MaximumOfLastNTest.java</code>, and <code>QuizzerTest.java</code>.
The MP0 testing suite follows a common pattern where functions are tested
against pre-computed inputs and outputs.
So, for example, when testing <code>MaximumOfLastNTest.java</code>, we compute the correct
answer for a small subset of test cases and use this to determine whether your
solution works in all cases.</p>
</div>
<div class="paragraph">
<p>Automated testing is a hugely important part of modern software development.
Just like computers are good at running programs, they are also good at running
programs to debug other programs.
Independently developing a method and the function that tests it allows the two
to support each other.
The test may find errors in the method, and, the method may also identify errors
in the test.</p>
</div>
</div>
<div class="sect2">
<h3 id="autograding">4.3. Autograding</h3>
<div class="paragraph">
<p>We have provided you with an autograding script that you can use to <em>estimate</em>
your current grade as often as you want.
The IntelliJ project a run configuration called "Grade MP0" that will run the
autograder for MP0.</p>
</div>
<div class="paragraph">
<p>Unless you have modified the test cases or autograder configuration files, the
autograding output should approximate the score that you will earn when you
submit.
If you modify our test cases or the autograding configuration, all bets are off.
You may also lose points if your solution runs too slowly and exceeds the
testing timeouts.</p>
</div>
</div>
<div class="sect2">
<h3 id="style">4.4. Style Points</h3>
<div class="paragraph">
<p>90 points on MP0 are for correctly implementing the required functions.
The other 10 points are for <em>style</em>.
Writing readable code according to a style guideline is extremely important, and
we are going to help you get into this habit right from the start.
Every software development company and most active open-source projects maintain
style guidelines.
Adhering to them will help others understand and integrate your contributions.</p>
</div>
<div class="paragraph">
<p>We have configured the <code>checkstyle</code> plugin to enforce a variant of the
<a href="http://checkstyle.sourceforge.net/sun_style.html">Sun Java coding style</a>.
IntelliJ should naturally generate code that meets this standard.
So you should not have to fight with IntelliJ too much to avoid <code>checkstyle</code>
violations.</p>
</div>
<div class="paragraph">
<p>However, the <code>checkstyle</code> plugin does require you to add
<a href="https://en.wikipedia.org/wiki/Javadoc">Javadoc</a>
comments, and also avoid the use of so-called
<a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad"><em>magic
numbers</em></a>.
You may find these requirements a bit annoying at first, but we trust that you
will get used to them.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cheating">5. Cheating</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Please review the
<a href="/info/syllabus#cheating">CS 125 cheating policies</a>.</p>
</div>
<div class="paragraph">
<p>All submitted MP source code will be checked by automated plagiarism detection
software.
Cheaters will receive stiff penalties&mdash;the hard-working students in the
class that are willing to struggle for their grade demand it.</p>
</div>
</div>
</div>