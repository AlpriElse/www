<div class="sect1">
<h2 id="teuMuxnTjenjpISxjJeHzdTtgakAgzYm">!</h2>
<div class="sectionbody">
<div class="openblock janini small compiler">
<div class="content">
<div class="message">Object Design</div>
<div class="literalblock">
<div class="content">
<pre>public class Example {
  public static final String YOUR_CONSTANT = "Hello, world!";

  public static void main(String[] unused) {
    System.out.println("Hello, world!");
  }
}</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="nEqwhFuCTtwKRAOKaNirHHlnXWnAIZLr">Scope and Name Resolution</h2>
<div class="sectionbody">
<div class="listingblock smallest">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Example {
  // Both class and instance variables can be initialized
  public static int classNum = 8;
  public int objectNum = 4;

  // objectNum shadows this.objectNum... I'd pick a better name
  public void incrementObject(int objectNum) {
    this.objectNum += objectNum;
    classNum += objectNum;
  }
  // classNum shadows Example.classNum... I'd pick a better name
  public static void incrementClass(int classNum) {
    Example.classNum += classNum;
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>Let&#8217;s review our scoping rules.</p>
</div>
<div class="ulist s">
<ul>
<li>
<p>Work to the left.</p>
</li>
<li>
<p>Remember that method parameters <em>can</em> shadow (or conflict with) class or
instance variables.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="NLIaRhwxmoAkaqrcRQxtghMwNaAyaLaD">! Scope and Name Resolution</h2>
<div class="sectionbody">
<div class="listingblock janini smaller compiler">
<div class="content">
<pre>public class Example {
  public static int classNum = 8;
  public int objectNum = 4;

  public void incrementObject(int objectNum) {
    this.objectNum += objectNum;
    classNum += objectNum;
  }
  public static void incrementClass(int classNum) {
    Example.classNum += classNum;
  }
  public static void main(String[] unused) {
    Example example = new Example();
    System.out.println(example.classNum);
    System.out.println(example.objectNum);
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mlqtMBxERmbmWOjsDoKPXMdagktpcoHC"><code>final</code> and Constants</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Example {
  /** The number of hours of sleep you should get per night. */
  public static final int HOURS_PER_NIGHT = 8;
  ...
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>In Java a <code>final</code> variable <em>cannot be modified</em>.</p>
</div>
<div class="paragraph">
<p>You usually see this done to establish useful constant values&mdash;which can be
either <code>public</code> or <code>private</code></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="aRzsozxWPRNaTyegwrsSvYWsqtLGDtIE">! Example of <code>final</code></h2>
<div class="sectionbody">
<div class="literalblock janini small compiler">
<div class="content">
<pre>public class Example {
  public static final int HOURS_PER_NIGHT = 8;

  public static void main(String[] unused) {
    HOURS_PER_NIGHT = 4;
    System.out.println(HOURS_PER_NIGHT);
    HOURS_PER_NIGHT = 2;
    System.out.println(HOURS_PER_NIGHT);
    // I will never change!
  }
}</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="WqRJLyEMGzDnROsHBdlzMUbDckIilcNd">Let&#8217;s Talk <code>main</code></h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Example {
  public static void main(String[] unused) {
    System.out.println("How did I get here?");
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>You&#8217;ve been using and even writing <code>main</code> methods?
But <em>what is it</em>?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="PMvcyTJMxlQGwACGdChxIxqgfkfNHdhZ">Everything Has To Start Somewhere</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Example {
  public static void main(String[] unused) {
    System.out.println("And this is it!");
  }
}</code></pre>
</div>
</div>
<div class="ulist s">
<ul>
<li>
<p>When Java runs your program, execution has to start <em>somewhere</em>.</p>
</li>
<li>
<p>If a class has a <code>main</code> method Java can execute that class and begin the
process of running a program.</p>
</li>
<li>
<p>So <em>every</em> Java application starts in <code>main</code> somewhere.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="rHYJXgpSsZBecBvjSvwYlEpsQEnYnqEu">But What About <code>unused</code>?</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Example {
  public static void main(String[] unused) {
    System.out.println("And this is it!");
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>But why is <code>main</code> passed an array of <code>Strings</code>s (that we usually ignore)?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="DanbTceiYfVtGkwOPYEGQbXcOfDJTBLE">(Short Demo)</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="pYZKGvMxxScvhIAxiYzivbknbPBREIai">Object Modeling</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>We frequently use Java objects to model real objects or entities.</p>
</div>
<div class="paragraph">
<p>Objects allow us to <em>design</em> software that deals with things in realistic and
natural ways.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="WxKyPnXRwYtwcYEpgBXNwBlwGoPfKEdq">! Let&#8217;s Model Something</h2>
<div class="sectionbody">
<div class="literalblock janini smallest compiler">
<div class="content">
<pre>// Let's model something</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="XbvazhAtrSvzILsKXZArjvthYiwDAuZA">! Let&#8217;s Model Something Else</h2>
<div class="sectionbody">
<div class="literalblock janini smallest compiler">
<div class="content">
<pre>// Let's model something else!</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="ZEBVxWPQrcOuaYysYnTxExqnIIgKWTIs">Announcements</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="/MP/3/">MP3</a> is due Friday.</p>
</li>
<li>
<p>My office hours continue today at 11AM in the lounge outside of Siebel 0226.
I&#8217;ll need to leave a bit early today.</p>
</li>
</ul>
</div>
</div>
</div>