#!/usr/bin/env node

'use strict'

const minimist = require('minimist'),
      fs = require('fs'),
      path = require('path'),
      _ = require('underscore'),
      cheerio = require('cheerio'),
      expect = require('chai').expect,
      htmlMinifier = require('html-minifier'),
      wordWrap = require('word-wrap'),
      sentenceTokenizer = require('sentence-tokenizer'),
      debug = require('debug')('php2adoc');

var argv = minimist(process.argv.slice(2));
var inputFile = path.resolve(argv._[0]);
var $ = cheerio.load(htmlMinifier.minify(fs.readFileSync(inputFile).toString(), {
  collapseWhitespace: true,
  conservativeCollapse: true
}));

// Get the title
expect($('h1').length).to.equal(1);
const title = $('h1').text();

// Check for h2
const hasH2 = ($('h2').length > 0);

const onlySpaces = /^[ \t\f\v]+$/;
const startsWithSpace = /^[ \t\f\v]+/;
const endsWithSpace = /[ \t\f\v]+$/;

var skippedTags = {};

var replaceHTML = function() {
  if ($(this)[0].nodeType === 3) {
    return $(this).text();
  }

  var innerContents = $(this).contents().map(replaceHTML).toArray();
  var tagName = $(this)[0].tagName.trim();

  var start = '', end = '';
  var headingMatch = /^h(\d)/.exec(tagName);
  if (headingMatch) {
    var headingLevel = parseInt(headingMatch[1]);
    if (headingLevel === 1) {
      return '';
    } else {
      if (!hasH2) {
        headingLevel--;
      }
      return Array(headingLevel + 1).join("#") + " " + innerContents.join('').trim() + "\n\n";
    }
  }
  const tagName = $(this)[0].tagName;
  switch (tagName) {
    case 'p':
      return innerContents.join('').trim() + "\n\n";
    case 'em':
      return "_" + innerContents.join('').trim() + "_";
    case 'strong':
      return "*" + innerContents.join('').trim() + "*";
    case 'ul':
    case 'ol':
      return innerContents.join('').trim() + "\n\n";
    case 'li':
      if ($(this).parent()[0].tagName === 'ul') {
        return "* " + innerContents.join('').trim() + "\n\/\/\n";
      } else if ($(this).parent()[0].tagName === 'ol') {
        return ". " + innerContents.join('').trim() + "\n\/\/\n";
      }
    default:
      if (!(tagName in skippedTags)) {
        skippedTags[tagName] = 0;
      }
      skippedTags[tagName]++;
      return innerContents.join('').trim();
  }
}

var contents = $('div.container').map(replaceHTML).toArray().join('');
var cleanContents = contents.replace(/[\u2018\u2019]/g, "'")
  .replace(/[\u201C\u201D]/g, '"')
  .replace(/^(\n){2,}/gm, "\n")
  .replace(/^\x20+|\x20+$/gm, "")
  .replace(/^\/\/\n\n/gm, "\n");

// console.log(cleanContents);

var tokenizer = new sentenceTokenizer();
var cleanContents = _.reduce(cleanContents.split(/\n/), function (outputString, line) {
  tokenizer.setEntry(line);
  var sentences = tokenizer.getSentences();
  if (sentences[0] === '.') {
    sentences[1] = '. ' + sentences[1];
    sentences.shift();
  }
  line = sentences.join("\n\/\/\n");
  return outputString + wordWrap(line.trim(), {
    width: 80,
    indent: ''
  }) + "\n";
}, '');

cleanContents = cleanContents.replace(/^(\n){2,}/gm, "\n");

console.log(cleanContents);

// vim: ts=2:sw=2:et:ft=javascript
